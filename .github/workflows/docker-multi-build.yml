name: CI – Build, Test & Push All Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKERHUB_NAMESPACE: asyiqan
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: users
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Nginx
        run: |
          docker build -t $DOCKERHUB_NAMESPACE/cnas-nginx-proxy:${IMAGE_TAG} ./nginx
          docker push   $DOCKERHUB_NAMESPACE/cnas-nginx-proxy:${IMAGE_TAG}

      - name: Build & Push MySQL Init Image
        run: |
          # optional: if you have a custom Dockerfile under database/
          docker build -t $DOCKERHUB_NAMESPACE/cnas-mysql-db:${IMAGE_TAG} ./database
          docker push   $DOCKERHUB_NAMESPACE/cnas-mysql-db:${IMAGE_TAG}

      # Loop through each PHP service folder
      - name: Build, Test & Push PHP Micro‑services
        run: |
          for svc in services/*; do
            svc_name=$(basename "$svc")
            img="$DOCKERHUB_NAMESPACE/$svc_name"
            echo "→ Building $svc_name"
            docker build -t $img:${IMAGE_TAG} "$svc"

            echo "→ Testing $svc_name against MySQL"
            docker network create test-net || true
            docker run -d --name mysql-test --network test-net \
              -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=users mysql:8.0
            sleep 20

            # Build a disposable test image to verify connectivity
            docker build -t test-$svc_name "$svc"
            docker run --rm --network test-net test-$svc_name \
              php -r "echo mysqli_connect('mysql-test','root','root','users') ? '✅ OK' : '❌ FAIL';"

            # Push the real image
            docker push $img:${IMAGE_TAG}
          done
